CREATE DATABASE GSM;
USE GSM;

-- 1. Supplier Table
CREATE TABLE IF NOT EXISTS supplier (
    sup_id TINYINT PRIMARY KEY,
    sup_name VARCHAR(255),
    address TEXT
);

SELECT * FROM supplier;

-- 2. Categories Table
CREATE TABLE IF NOT EXISTS categories (
    cat_id TINYINT PRIMARY KEY,
    cat_name VARCHAR(255)
);

SELECT * FROM categories;


-- 3. Employees Table
CREATE TABLE IF NOT EXISTS employees (
    emp_id TINYINT PRIMARY KEY,
    emp_name VARCHAR(255),
    hire_date VARCHAR(255)
);

select * FROM employees;

-- 4. Customers Table
CREATE TABLE IF NOT EXISTS customers (
    cust_id SMALLINT PRIMARY KEY,
    cust_name VARCHAR(255),
    address TEXT
);

-- 5. Products Table
CREATE TABLE IF NOT EXISTS products (
    prod_id TINYINT PRIMARY KEY,
    prod_name VARCHAR(255),
    sup_id TINYINT,
    cat_id TINYINT,
    price DECIMAL(10,2),
    FOREIGN KEY (sup_id) REFERENCES supplier(sup_id)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (cat_id) REFERENCES categories(cat_id)
        ON UPDATE CASCADE ON DELETE CASCADE
);

select * from products;

-- 6. Orders Table
CREATE TABLE IF NOT EXISTS orders (
    ord_id SMALLINT PRIMARY KEY,
    cust_id SMALLINT,
    emp_id TINYINT,
    order_date VARCHAR(255),
    FOREIGN KEY (cust_id) REFERENCES customers(cust_id)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (emp_id) REFERENCES employees(emp_id)
        ON UPDATE CASCADE ON DELETE CASCADE
);
select * from orders;

-- 7. Order_Details Table
CREATE TABLE IF NOT EXISTS order_details (
    ord_detID SMALLINT AUTO_INCREMENT PRIMARY KEY,
    ord_id SMALLINT,
    prod_id TINYINT,
    quantity TINYINT,
    each_price DECIMAL(10,2),
    total_price DECIMAL(10,2),
    FOREIGN KEY (ord_id) REFERENCES orders(ord_id)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (prod_id) REFERENCES products(prod_id)
        ON UPDATE CASCADE ON DELETE CASCADE
);

select * from order_details;




-- 1. Customer Insights

-- How many unique customers have placed orders?

SELECT COUNT(DISTINCT cust_id) AS unique_customers
FROM orders;

-- Which customers have placed the highest number of orders?

select c.cust_id,c.cust_name,count(o.ord_id) as orders_count
from customers c
join orders o on c.cust_id = o.cust_id
group by c.cust_id,c.cust_name
order by orders_count desc;

-- What is the total and average purchase value per customer?
SELECT 
    c.cust_id,
    c.cust_name,
    SUM(od.total_price) AS total_purchase_value,
    AVG(od.total_price) AS average_purchase_value
FROM customers c
JOIN orders o 
    ON c.cust_id = o.cust_id
JOIN order_details od 
    ON o.ord_id = od.ord_id
GROUP BY c.cust_id, c.cust_name
ORDER BY total_purchase_value DESC;

-- Who are the top 5 customers by total purchase amount?
select c.cust_id,c.cust_name,sum(od.total_price) as total_spent
from customers c
join orders o on c.cust_id = o.cust_id
join order_details od on o.ord_id = od.ord_id
group by c.cust_id,c.cust_name
order by total_spent desc
limit 5;

-- Product Performance
-- How many products exist in each category?
select cat.cat_name,count(p.prod_id) as product_count
from categories cat
left join products p on cat.cat_id = p.cat_id
group by cat.cat_name;

-- ●    What is the average price of products by category?
select cat.cat_name,avg(p.price) as avg_price
from categories cat
join products p on cat.cat_id = p.cat_id
group by cat.cat_name;

-- ●    Which products have the highest total sales volume (by quantity)

select p.prod_name,sum(od.quantity) as total_qty
from products p
join order_details od on p.prod_id = od.prod_id
group by p.prod_name
order by total_qty desc;

-- What is the total revenue generated by each product?

select p.prod_name,sum(od.total_price) as revune
from products p
join order_details od on p.prod_id = od.prod_id
group by p.prod_name
order by revune desc;

-- ●    How do product sales vary by category and supplier

select c.cat_name,s.sup_name,
sum(od.quantity) as qty_sold,
sum(od.total_price) as total_revune
from products p
join categories c on p.cat_id = c.cat_id
join supplier s on p.sup_id = s.sup_id
join order_details od on p.prod_id = od.prod_id
group by c.cat_name, s.sup_name
order by total_revune desc;


-- 3. Sales and Order Trends

-- Total number of orders
SELECT COUNT(*) AS TotalOrders
FROM Orders;

-- Average value per order
SHOW COLUMNS FROM order_details;

SELECT AVG(OrderTotal) AS AvgOrderValue
FROM (
    SELECT ord_id, SUM(total_price) AS OrderTotal
    FROM order_details
    GROUP BY ord_id
) AS OrderValues;

-- Dates with most orders placed
-- Dates with most orders placed
SELECT order_date, COUNT(*) AS TotalOrders
FROM orders
GROUP BY order_date
ORDER BY TotalOrders DESC;


-- Monthly trends in order volume and revenue
SELECT left(o.order_date,7) as order_Month,
       COUNT(DISTINCT o.ord_id) AS order_volume,
       SUM(od.quantity * od.each_price) AS TotalRevenue
FROM orders o
JOIN order_details od ON o.ord_id = od.ord_id
GROUP BY order_Month
ORDER BY order_Month;


-- Order patterns across weekdays vs weekends
SELECT 
    CASE 
        WHEN DAYOFWEEK(STR_TO_DATE(order_date, '%Y-%m-%d')) IN (1,7) THEN 'Weekend'
        ELSE 'Weekday'
    END AS DayType,
    COUNT(*) AS TotalOrders
FROM orders
GROUP BY DayType;



-- 4. Supplier Contribution

-- Total number of suppliers
SELECT COUNT(*) AS TotalSuppliers
FROM supplier;

-- Supplier providing the most products
SELECT s.sup_id, s.sup_name, COUNT(p.prod_id) AS ProductCount
FROM supplier s
JOIN products p ON s.sup_id = p.sup_id
GROUP BY s.sup_id, s.sup_name
ORDER BY ProductCount DESC
LIMIT 1;

-- Average price of products from each supplier
SELECT s.sup_id, s.sup_name, AVG(p.price) AS AvgProductPrice
FROM supplier s
JOIN products p ON s.sup_id = p.sup_id
GROUP BY s.sup_id, s.sup_name
ORDER BY AvgProductPrice DESC;

-- Suppliers contributing the most to total sales (by revenue)
SELECT s.sup_id, s.sup_name,
       SUM(od.total_price) AS TotalRevenue
FROM supplier s
JOIN products p ON s.sup_id = p.sup_id
JOIN order_details od ON p.prod_id = od.prod_id
GROUP BY s.sup_id, s.sup_name
ORDER BY TotalRevenue DESC;


-- 5️ Employee Performance

-- Number of employees who processed orders
SELECT COUNT(DISTINCT emp_id) AS ActiveEmployees
FROM orders;

-- Employees handling the most orders
SELECT e.emp_id, e.emp_name,
       COUNT(DISTINCT o.ord_id) AS OrdersHandled
FROM employees e
JOIN orders o ON e.emp_id = o.emp_id
GROUP BY e.emp_id, e.emp_name
ORDER BY OrdersHandled DESC;

-- Total sales value processed by each employee
SELECT e.emp_id, e.emp_name,
       SUM(od.total_price) AS TotalSales
FROM employees e
JOIN orders o ON e.emp_id = o.emp_id
JOIN order_details od ON o.ord_id = od.ord_id
GROUP BY e.emp_id, e.emp_name
ORDER BY TotalSales DESC;

-- Average order value handled per employee
SELECT e.emp_id, e.emp_name,
       AVG(OrderValue) AS AvgOrderValue
FROM employees e
JOIN orders o ON e.emp_id = o.emp_id
JOIN (
    SELECT ord_id, SUM(total_price) AS OrderValue
    FROM order_details
    GROUP BY ord_id
) AS OrderVals ON o.ord_id = OrderVals.ord_id
GROUP BY e.emp_id, e.emp_name
ORDER BY AvgOrderValue DESC;

-- 6. Order Details Deep Dive

-- Relationship between quantity ordered and total price
SELECT quantity, total_price
FROM order_details;

-- Average quantity ordered per product
SELECT p.prod_id, p.prod_name, AVG(od.quantity) AS AvgQuantity
FROM products p
JOIN order_details od ON p.prod_id = od.prod_id
GROUP BY p.prod_id, p.prod_name
ORDER BY AvgQuantity DESC;

-- Variation in unit price (each_price) across products and orders
SELECT p.prod_id, p.prod_name, od.each_price
FROM products p
JOIN order_details od ON p.prod_id = od.prod_id
ORDER BY p.prod_name, od.each_price;


